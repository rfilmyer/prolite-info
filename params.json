{
  "name": "Prolite PL-M2014R Serial Protocol",
  "tagline": "Keeping information about the Prolite PL-M2014R from http://wls.wwco.com/ledsigns/prolite up on a different site, because if this site went down it would be an absolute disaster",
  "body": "### Note: I'm just working off of [this page](http://wls.wwco.com/ledsigns/prolite/ProliteProtocol.html), and not done. Pull requests are accepted :)\r\n#Prolite Protocol (ROM 5.24Q)\r\n\r\nThis page contains advanced protocol information for communicating with the Pro-Lite PL-M2014R message board over the RS-232 port. (This is very easy to do with Linux.)\r\nThe Basic Pro-Lite ASCII-Series Version 5.25 information is available in [Word format]() from the manufacturer. It is not accurate for the PL-M2014R, but it is pretty.\r\n\r\nThe sign can only accept commands up to 1,023 bytes in length. This includes packet headers and trailers, leaving the maximum command length of 1016 characters for all text and attributes.\r\n\r\nWith 26 pages, each approximately 1,024 bytes long (accounting for internal overhead), this leaves 26,624 characters of text that the unit can hold, not counting trivia usage.\r\n\r\nLong messages must be stored in multiple pages, and a timer created (most likely with a value of \"always\") to put the pages in a display sequence.\r\n\r\nNote that text gets into the sign's memory one of two ways. The first is entering the text from the remote control. The second is from the RS232 port. Input from the RS232 port is subject to pre-processing. This means if you want the text `<CA>` in your text, the RS232 is going to interpret that as a color code, while the remote control will not.\r\n\r\nWhile communication is bi-directional, you can only receive acknowledgements the sign received a command. You can not obtain the message in the sign, you can not download the graphics or character shapes, you can not ask the time, you can not read the timers, you can not determine which page is running, you can not tell when the message scrolling by ends.\r\n\r\nApparently with the 5.24Q ROM, if you send a lot of garbage to the sign that it does not recognize, the sign will stop responding to commands. The only way to clear it seems to be unplugging the sign, waiting a moment, and plugging it back in. You'll see a brief \"CHECKING...\" message.\r\n\r\nUnit Identification\r\n\r\nEach unit is given an ID number from its setup mode using the remote. Apparently it is possible to chain 255 units together.\r\nThe protocol can talk to an individual unit, or all units, but not a group of unit IDs. I doubt it is a good idea to give more than one unit the same ID number, since each unit sends back a reply when it is sent a unit-specific command.\r\n\r\n## Protocol Structure\r\n```\r\n<IDxx>\r\n<IDxx>...TEXT/COMMAND.. cr lf\r\n```\r\n* `<IDxx>` - Packet header also serving as destination identifier.\r\n** `<, >` are really `<` (`0x3C`) and `>` (`0x3D`)`\r\n** `ID` is the string `ID` (`0x49`,`0x44`). This must be in uppercase.\r\n** `xx` This is the unit ID represented as a two digit hex number in ASCII, using a leading zero if necessary.`\r\n*** `00` = all units (Note: no display units will reply on a global request)\r\n*** `01` = display unit 1\r\n*** `02` = display unit 2\r\n*** `...`\r\n*** `0A` = display unit 10\r\n*** `...`\r\n*** `10` = display unit 16\r\n*** `...`\r\n*** `FE` = display unit 254`\r\n*** `FF` = display unit 255`\r\n\r\n* `...TEXT/COMMAND...` Packet body either Display Data or Command\r\n*`cr lf` All packets end with a Carriage Return and Line Feed\r\n**`cr` = `0x0D`\r\n**`lf` = `0x0A`\r\n\r\n### Important Notes:\r\n\r\nIf the sign has been idle (not received any communication) for over one minute, it must be sent the protocol header `<IDxx> cr lf` to wake up. The protocol header can be thought of as being similiar to the AT command for Hayes modems, which wake up the modem putting it into command mode and prefixing all modem commands.\r\nWhen a sign accepts a wake up or command, it will respond back with the same protocol header: `<IDxx> cr lf` to signal the sign is awake.\r\n\r\nEach packet(s) must consist of a unique ID number, except the SET CLOCK command (see Command section).\r\n\r\nAn `<IDxx>` will answer from the sign if sign receives the data unless they are SET CLOCK command and global call.\r\n\r\n## Display Text Pages\r\n\r\nThe sign has the ability to store 26 messages, each partition is called a page. A page is identified by a letter from A to Z (in uppercase). The length of each page is dynamic. A page can contain text, graphics, and European characters in various colors and sizes using different presentation techniques.\r\n\r\nSyntax:\r\n\r\n`<Pn>...MSG...`\r\n* `<Pn>` denotes which page this message belongs to\r\n* `<`, `P`, `>` are ASCII characters.\r\n* `n` is the page number in ASCII character, i.e.\r\n** `A` = Page A\r\n** `B` = Page B\r\n** ...\r\n** `Y` = Page Y\r\n** `Z` = Page Z\r\n* `...MSG...` Contents message data of this page including color information, character size information & display functions etc.\r\n\r\n# Haven't formatted past here\r\n\r\nThe text of the message may be any text in free format, consisting of letters, numbers, and symbols. Only characters `0x20` to `0x7F` are supported.\r\n\r\nImportant Notes:\r\nIf <Pn> is not specified, page A is assumed as default.\r\nIf no page content is provided, the page is not made empty. It is treated as a NOP (no-operation). To blank a page, use a space (which will scroll a space), or delete the page.\r\n\r\nEuropean Characters\r\n\r\nEuropean characters can be displayed in the board using a syntax that is similar to HTML tags.\r\n<U#>\tÉ\t \t<UA>\tÇ\t \t<UB>\tBroken\t \t<UC>\tBroken\t \t<UD>\tO overlaid with ×\r\n<UE>\tü\t \t<UF>\tupsidedown V\t \t<UG>\tthree bars\t \t<UH>\tpi\t \t<UI>\tï\r\n<UJ>\tsum\t \t<UK>\t¥\t \t<UL>\t¢\t \t<UM>\tBroken\t \t<UN>\tBroken\r\n<UO>\tÒ\t \t<UP>\tÙ\t \t<UQ>\tê\t \t<UR>\tû\t \t<US>\ttwo tall skiny F's\r\n<UT>\tî\t \t<UU>\tOmega\t \t<UV>\tBroken\t \t<UW>\të\t \t<UX>\tBroken\r\n<UY>\tô\t \t<UZ>\tBroken\r\n \r\n<U$>\tØ\t \t<Ua>\tÄ\t \t<Ub>\tBroken\t \t<Uc>\tBroken\t \t<Ud>\tÓ\r\n<Ue>\tÅ\t \t<Uf>\tÍ\t \t<Ug>\tÚ\t \t<Uh>\tÞ\t \t<Ui>\tsimilar to ç\r\n<Uj>\tþ\t \t<Uk>\tÐ\t \t<Ul>\tð\t \t<Um>\tBroken\t \t<Un>\tBroken\r\n<Uo>\tumlat G\t \t<Up>\tÖ\t \t<Uq>\tÆ\t \t<Ur>\tÜ\t \t<Us>\tá\r\n<Ut>\tí\t \t<Uu>\tlike ç but with S\t \t<Uv>\tBroken\t \t<Uw>\tú\t \t<Ux>\tBroken\r\n<Uy>\tô\t \t<Uz>\tBroken\r\n \r\n<U0>\tà\t \t<U1>\t¡\t \t<U2>\té\t \t<U3>\tÈ\t \t<U4>\t£\r\n<U5>\tlower Psi\t \t<U6>\tupper Phi\t \t<U7>\tè\t \t<U8>\tì\t \t<U9>\tç\r\n<U@>\tê\t \t<U%>\tø\t \t<U^>\tumlat Y\t \t<U&>\tý\t \t<U*>\tå\r\n<U(>\tß\t \t<U)>\tbared ã\t \t<U->\tlower gamma\t \t<U+>\tá\t \t<U_>\tbar Ñ\r\n<U=>\tâ\t \t<U`>\tó\t \t<U~>\t¤\t \t<U!>\tæ\t \t<U{>\tbar ñ\r\n<U}>\tupside down ?\t \t<U[>\tupper gamma\t \t<U]>\tupper delta\t \t<U:>\tö\t \t<U\">\tä\r\n<U:>\tö\t \t<U\">\tlower alpha\t \t<U:>\tnull, no text\t \t<U'>\tä\t \t<U'>\tß\r\n<U\\>\tNot defined\t \t<U|>\tNot defined\t \t<U,>\tNot defined\t \t<U.>\tNot defined\t \t<U/>\tNot defined\r\n<U?>\tNot defined\r\nImportant Notes:\r\n\r\nThis particular listing is believed to be very accurate, unlike other sources of documentation for the PL-M2014R.\r\nApparently the following table codes do not work: B, C, M, N, V, X, Z, b, c, m, n, v, x, and z\r\n\r\nIn addition undocumented symbols have been presented here, and while these characters can show up in the character set, it is undetermined why. For instance <U:> by itself shows nothing, but as Xxx<U:>Yyy it shows up as a ö; <U;> by itself shows up as a lowercase Greek alpha, but as ZZ<U:>ZZ the command won't even get accepted. The behavior seems very much based on position.\r\n\r\nGraphic Blocks\r\n\r\nThere are 26 reprogramable graphic blocks.\r\n<BA>\tTelephone\t \t<BB>\tGlasses\t \t<BC>\tTap\t \t<BD>\tRocket\t \t<BE>\tMonster\r\n<BF>\tKey\t \t<BG>\tShirt\t \t<BH>\tHelicopter\t \t<BI>\tCar\t \t<BJ>\tTank\r\n<BK>\tHouse\t \t<BL>\tTeapot\t \t<BM>\tKnife & Fork\t \t<BN>\tDuck\t \t<BO>\tMotorcycle\r\n<BP>\tBicycle\t \t<BQ>\tCrown\t \t<BR>\tSweet Heart\t \t<BS>\tArrow Right\t \t<BT>\tArrow Left\r\n<BU>\tArrow Down-Left\t \t<BV>\tArrow Up-Left\t \t<BW>\tMug of Beer\t \t<BX>\tChair\t \t<BY>\tHigh-heeled Shoes\r\n<BZ>\tWine Glass\r\nNote:\r\nThe Monster and Chair are pretty lame. These are good candidates for experimenting with replacement graphics. If you've blown your board's graphics away, simply disconnecting the power and reconnecting will restore the graphics or use the delete all command.\r\n\r\nColors\r\n\r\nThere are 26 color modes.\r\n<CA>\tDim Red\t \t<CB>\tRed\t \t<CC>\tBright Red\r\n<CD>\tOrange\t \t<CE>\tBright Orange\t \t<CF>\tLight Yellow\r\n<CG>\tYellow\t \t<CH>\tBright Yellow\t \t<CI>\tLime\r\n<CJ>\tDim Lime\t \t<CK>\tBright Lime\t \t<CL>\tBright Green\r\n<CM>\tGreen\t \t<CN>\tDim Green\t \t<CO>\tYellow/Green/Red\r\n<CP>\tRainbow (Default)\t \t<CQ>\tRed/Green 3D\t \t<CR>\tRed/Yellow 3D\r\n<CS>\tGreen/Red 3D\t \t<CT>\tGreen/Yellow 3D\t \t<CU>\tGreen on Red\r\n<CV>\tRed on Green\t \t<CW>\tOrange on Green 3D\t \t<CX>\tLime on Red 3D\r\n<CY>\tGreen on Red 3D\t \t<CZ>\tRed on Green 3D\r\nNote:\r\nSome of these color combinations look so bad that they should require a permit.\r\n\r\nTo define a color, the attribute code must be placed before the text. There is no \"I'm done with the color\" code, just switch to a different one.\r\n\r\nCharacter Sizes\r\n\r\n<SA>\tNormal (Default)\t \t<SE>\tFlashing Normal\r\n<SB>\tBold (Wide)\t \t<SF>\tFlashing Bold (Wide)\r\n<SC>\tItalic\t \t<SG>\tFlashing Italic\r\n<SD>\tBold Italic (Wide)\t \t<SH>\tFlashing Bold Italic (Wide)\r\nTo define a size, the attribute code must be placed before the text. There is no \"I'm done with the size\" code, just switch to a different one.\r\n\r\nDisplay Functions\r\n\r\n<FA>\tAUTO\r\nRandom color & presentation\t \t<FB>\tOPEN\r\n<-- Open from Center -->\t \t<FC>\tCOVER\r\n<-- Covers Text -->\t \t<FD>\tAPPEAR\r\nInstantly replaces text\t \t<FE>\tCYCLING\r\nRolling Colors\r\n<FF>\tCLOSE <--\r\nBlank screen right to left\t \t<FG>\tCLOSE -->\r\nBlank screen left to right\t \t<FH>\tCLOSE --><--\r\nBlank screen outter to center\t \t<FI>\tSCROLL UP\r\nScroll up from bottom\t \t<FJ>\tSCROLL DOWN\r\nScroll down from top\r\n<FK>\tOVERLAP\r\nTwo layers slide together to form text\t \t<FL>\tSTACKING\r\nFalling dots form text\t \t<FM>\tCOMIC 1\r\nPacMan\t \t<FN>\tCOMIC 2\r\nRandom creature walking\t \t<FO>\tBEEP\r\nSign beeps\r\n<FP>\tPAUSE\r\nShort delay of motion\t \t<FQ>\tSLEEP\r\nBlank screen until the next timer activates\t \t<FR>\tRANDOM\r\nRandom dots appear forming text\t \t<FS>\tSHIFT <--\r\nRoll message right to left (Default)\t \t<FT>\tTIME/DATE\r\nShow time and date, no choice of formatting\t\r\n<FU>\tMAGIC\r\nChange text color each time\t \t<FV>\tTHANK YOU\r\nCursive \"Thank you\"\t \t<FW>\tWELCOME\r\nCursive \"Welcome\"\t \t<FX>\tSPEED 1\r\nJittery\t \t<FY>\tSPEED 2\r\n<FZ>\tSPEED 3\r\nNote:\r\nAUTO, OPEN <-- -->, COVER <-- -->, APPEAR, CYCLING, SCROLL UP, SCROLL DOWN, RANDOM, and MAGIC terminate their behavior by either another function or when the screen is full of text.\r\nFor best effect, CLOSE operations should happen after text has been displayed, not as the start of a presentation.\r\n\r\nTimer Scheduling\r\n\r\nAside from being able to play a specific page, the message board has 10 timers. Each timer has an ordered sequence from 1 to 32 pages to display associated with it, there may be duplicates.\r\nA timer may be thought of a request such as: \"when the time of day matches my timer settings, display this sequence of message pages. For example, at 1:PM display pages A, B, and C; while at 5:PM display page A twice, then page D, then page A again, then page E.\r\n\r\nNote that if there are two timers that would both be active, the page sequence appears to be randomly selected, and the timers are not checked again until after the whole sequence has been displayed at least once.\r\n\r\nOnce a timer is set, it can be replaced or deleted. To use the timers, it is important to set the clock in the message board.\r\n\r\n<IDxx><Tn>WHHMMPPP....cr lf\r\n\r\n<Tn>\tdenotes the Timer n, where n = A to J\r\n<,T & > are ASCII character \"<\" \"T\" & \">\" respectively n is the Timer (schedule) number in ASCII character, i.e.\r\nA = Timer A\r\nB = Timer B\r\n...\r\nI = Timer I\r\nJ = Timer J\r\nW denotes the day of week where this schedule activates, the valid values are as follow (in a single ASCII character form):\r\n* = Every day of the week\r\n0 = Sunday\r\n1 = Monday\r\n...\r\n5 = Friday\r\n6 = Saturday\r\nHH denotes the Hour when this schedule activates, the valid values are as follow (in two ASCII character form, 24 hour notation with leading zeros):\r\n** = Every hour of the day\r\n00 = midnight\r\n01 = 1:AM\r\n...\r\n13 = 1:PM\r\n...\r\n18 = 6:PM\r\n...\r\n23 = 11:PM\r\nMM denotes the minute when this schedule activates, the valid values are as follow (in two ASCII character form, with leading zeros):\r\n** = Every minute of the hour\r\n00 to 59 = specific minutes to start\r\nPPP....\tdenotes the Page sequence in this schedule, the length of the sequence is dynamic upto 32 entries, the valid page number ranges from A to Z. Duplicate pages are allowd.\r\nNote: Timers are treated as start times for a message to display. Timers are checked once a minute.\r\nReprogramming a Graphic Block\r\n\r\nThere are 26 (A - Z) user alterable graphic blocks available, the basic format is as follow:\r\n<Gn>...CCC...cr lf\r\n\r\n<Gn>\t= ASCII \"<\",\"G\" & \">\"\r\nn= Block graphic number in ONE ASCII character (A - Z)\r\n...CCC... is a bit pattern specifying the color information of the graphic block in a fixed length of 126 bytes.\r\n\r\nA graphic block consists a matric of 18 dots wide by 7 rows tall. Each cell can be either Red, Yellow, Green, or unlit as Black.\r\nByte 1 ->\r\nByte 19 ->\r\nByte 37 ->\r\nByte 55 ->\r\nByte 73 ->\r\nByte 91 ->\r\nByte 109 ->\tRRRRRRRRRRRRRRRRRR\r\nYYYYYYYYYYYYYYYYYY\r\nGGGGGGGGGGGGGGGGGG\r\nRRRRRRBBBBBBBRRRRR\r\nRRRRRRBBBBBBBRRRRR\r\nRRRRRRRRRRRRRRRRRR\r\nGGGGGYYYYYYYRRRRRR\r\nRRRRRRRRRRRRRRRRRR\t<-- Byte 18\r\n<-- Byte 36\r\n<-- Byte 54\r\n<-- Byte 72\r\n<-- Byte 90\r\n<-- Byte 108\r\n<-- Byte 126\r\n\r\nFor each byte it can either be \"R\" (red), \"G\" (green), \"Y\" (yellow) or \"B\" (black) . Any characters other than \"R\",\"G\",\"Y\" & \"B\" are treated as Black.\r\nThe above picture could be represented with the following command, which would update graphic block X on display board 01:\r\n<ID01><GA>RRRRRRRRRRRRRRRRRRYYYYYYYYYYYYYYYYYYGGGGGGGGGGGGGGGGGG\r\nRRRRRRBBBBBBBRRRRRRRRRRRBBBBBBBRRRRRRRRRRRRRRRRRRRRRRRGGGGGYYYYYY\r\nYRRRRRRRRRRRRRRRRRRRRRRRRcr lf\tThis line was too long to fit on the screen, it is contiguous when sent to the sign.\r\nNote:\r\nIf any more than 126 bytes are sent, specifying the graphic block, the request will be ignored.\r\nCommands\r\n\r\nDelete Page(s)\r\n\r\n<IDxx><DPn>cr lf\r\n<,D,P& > = ASCII \"<\",\"D\",\"P\" & \">\"\r\nn Page number in ASCII character (A - Z & *)\r\n<DP*>\t=\tDelete All pages\r\n<DPA>\t=\tDelete page A\r\n...\r\n<DPZ>\t=\tDelete page Z\r\nDelete Timer(s)\r\n\r\n<IDxx><DTn>cr lf\r\n<,D,T& > = ASCII \"<\",\"D\",\"T\" & \">\"\r\nn Timer (Schedule) number in ASCII character (A - J & *)\r\n<DT*>\t=\tDelete ALL timers\r\n<DTA>\t=\tDelete TIMER A\r\n...\r\n<DTJ>\t=\tDelete TIMER J\r\nDelete Graphic block(s)\r\n\r\n<IDxx><DGn>cr lf\r\n<,D,G& > = ASCII \"<\",\"D\",\"G\" & \">\"\r\nn Graphic block number in ASCII character (A - Z & *)\r\n<DP*>\t=\tDelete All graphics\r\n<DPA>\t=\tDelete Graphic block A\r\n...\r\n<DPZ>\t=\tDelete Graphic block Z\r\nDelete ALL\r\n\r\nThis command will delete all Page(s), Timer(s) and restore all default Graphic blocks.\r\n<IDxx><D*>cr lf\r\n\r\n<,D,*& > = ASCII \"<\",\"D\",\"*\" & \">\"\r\nRun Page Now\r\n\r\n<IDXX><RPn>cr lf\r\n<,R,P & > = ASCII \"<\",\"R\",\"P\" & \">\"\r\nn Page in ASCII character (A - Z & *)\r\n<RP*>\t=\tResume display of interrupted timer\r\n<RPA> =\tRun Page A\r\n...\r\n<RPZ>\t=\tRun Page Z\r\nNote: Running a page (A-Z) stops the timer check from happening. This is useful for interrupting a timer sequence to display an important piece of information.\r\nSet Clock\r\n\r\nThis is a special command to sync. or set the relative/real time clock of the display unit(s) and it is the only GLOBAL command in this set of protocol. You do not prefix this command with an <IDxx> header. The format as shown below:\r\n<TYYMMDDWhhmmss>cr lf\r\n\r\n<, T & >\tASCII \"<\", \"T\" & \">\"\r\nYY\tYear (00 - 99)\r\nMM\tMonth (01 - 12)\r\nDD\tDay (01 - 31)\r\nW\tDay of week (0 - 6)\r\nhh\tHour (in 24 hour format, 00 - 23)\r\nmm\tMinute (00 - 59)\r\nss\tSecond (00 - 59)\r\nTrivia Mode\r\n\r\nTriva mode divides the 32K into two 16K banks, and it operates by displaying a trivia question, your message, a trivia answer, your message, another trivia question, your message, another trivia answer, your message, and so on.\r\nBy deleting the trivia from the message board, the full memory may be used.\r\n\r\n<IDxx><Q+>cr lf\r\n<IDxx>trivia text questioncr lf\r\n<IDxx>trivia text answercr lf\r\n...repeat the above as desired\r\n<IDxx><Q->\r\n\r\nxx = unit ID (it is recommended you use 00) Important Notes:\r\nThere is no reason your trivia messages can't be complex with color codes and presentations. While you are loading trivia text, no trivia will display. Additionally, you do not need to limit yourself to trivia or to pairs of lines. The sign will display the first line, the message, then the next line, then the message, and so on.\r\nNot specifying any trivia questions/answers will delete the trivia from the sign, thus making the 32K available for your messages.\r\n\r\nIf you do not have PC or cable to delete the Trivia you can open the sign from the left and remove the RAM chip for 3 seconds. This deletes all the memory in the sign.\r\n\r\nThere are three chips in sockets: two small and one large. The small with label is the EPROM. The other small without a label is the RAM (this is the one you want to remove). The arge without label is the CPU; removing it is a bad idea.\r\n\r\nTo get the trivia back, either reset the unit, or load a Generic Trivia file or use the software that you can order.\r\n\r\nExamples\r\n\r\n<ID01>cr lf\tWake up unit 1\r\n<ID01><PA>Hello World cr lf\tDisplay the words Hello World on unit 1\r\n<ID00><Q+>cr lf\r\n<ID00><Q->cr lf\tErase Trivia on all units\r\n<ID00><FX>cr lf\tWith no text, the display halts the scrolling\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}